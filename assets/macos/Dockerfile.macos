# Use a minimal Debian-based image
# Explicitly use ARM64 architecture for macOS/Apple Silicon
FROM --platform=$BUILDPLATFORM debian:bullseye-slim

# Detect architecture and use the appropriate AppImage URL
ARG TARGETARCH

# Obsidian version
ARG OBSIDIAN_VERSION="1.8.10"

#RUN if [ "$TARGETARCH" = "arm64" ]; then TINI_BIN=tini-aarch64; else TINI_BIN=tini ; fi && \
#    wget -O /tini https://github.com/krallin/tini/releases/download/${TINI_VERSION}/${TINI_BIN} && \
#    chmod +x /tini

ENV OBSIDIAN_APPIMAGE_ARM64_URL="https://github.com/obsidianmd/obsidian-releases/releases/download/v${OBSIDIAN_VERSION}/Obsidian-${OBSIDIAN_VERSION}-arm64.AppImage"
ENV OBSIDIAN_APPIMAGE_STD_URL="https://github.com/obsidianmd/obsidian-releases/releases/download/v${OBSIDIAN_VERSION}/Obsidian-${OBSIDIAN_VERSION}.AppImage"

ENV USERNAME=appuser
ENV OBSIDIAN_CONFIG_DIR=/config/obsidian
ENV OBSIDIAN_APP_CONFIG_DIR=/home/${USERNAME}/.config/obsidian
ENV DEBIAN_FRONTEND=noninteractive
ENV DISPLAY=:99
ENV APP_DIR=/app
ENV DBUS_SESSION_BUS_ADDRESS=/dev/null
ENV TZ=Etc/UTC
ENV SCREEN_RESOLUTION=1280x1024x24

# Install dependencies
RUN apt-get update  \
    && apt-get install -y --no-install-recommends \
    # generic tools
    tini wget curl ca-certificates git unzip bsdextrautils procps \
    # binary inspection tools for debugging architecture issues
    file binutils \
    # x11 virtual display, fluxbox window manager, x11vnc (VNC server)
    xvfb fluxbox x11vnc \
    # dbus for Electron/Obsidian notifications and IPC
    dbus dbus-x11 \
    # Dependencies for Electron/Obsidian AppImage
    libgtk-3-0 libnotify4 libnss3 libxss1 libasound2 libxtst6 libx11-xcb1 libsecret-1-0 libgbm1 libuuid1 \
    libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcairo2 libcups2 libdbus-1-3 libdrm2 \
    libexpat1 libfontconfig1 libgbm1 libgdk-pixbuf2.0-0 libglib2.0-0 libnspr4 libpango-1.0-0 \
    libpangocairo-1.0-0 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 \
    libxrandr2 libxrender1 libxtst6 fonts-liberation libappindicator3-1 xdg-utils zlib1g zlib1g-dev \
    # For screenshots and UI automation
    scrot xdotool \
    # For desktop background and basic tools
    feh xterm x11-xserver-utils x11-utils \
    # For running commands as a different user
    gosu \
    # For AppImage
    fuse \
    # Clean up
    && apt-get clean \
    && find /var/lib/apt/lists -delete \
    && ln -sf /usr/bin/tini /tini

# Create a non-root user
RUN useradd --create-home --shell /bin/bash ${USERNAME}

# Create app and config directories
RUN mkdir -p ${APP_DIR} ${OBSIDIAN_CONFIG_DIR} && \
    mkdir -p ${OBSIDIAN_APP_CONFIG_DIR} && \
    chown -R ${USERNAME}:${USERNAME} ${APP_DIR} ${OBSIDIAN_CONFIG_DIR} && \
    chown -R ${USERNAME}:${USERNAME} ${OBSIDIAN_APP_CONFIG_DIR}

WORKDIR ${APP_DIR}

# Download and set up Obsidian AppImage with architecture detection
RUN echo "BUILDARCH=${BUILDARCH} TARGETARCH=${TARGETARCH} Architecture: $(uname -m)" && \
    echo "ARM64 URL: ${OBSIDIAN_APPIMAGE_ARM64_URL}" && \
    echo "STD URL: ${OBSIDIAN_APPIMAGE_STD_URL}" && \
    if [ "${TARGETARCH}" = "arm64" ]; then \
        echo "Detected ARM64 architecture, downloading ARM64 AppImage"; \
        export OBSIDIAN_APPIMAGE_URL=${OBSIDIAN_APPIMAGE_ARM64_URL}; \
    else \
        echo "Using standard x86_64 AppImage"; \
        export OBSIDIAN_APPIMAGE_URL=${OBSIDIAN_APPIMAGE_STD_URL}; \
    fi && \
    echo "Downloading from: ${OBSIDIAN_APPIMAGE_URL}" && \
    wget -O Obsidian.AppImage "${OBSIDIAN_APPIMAGE_URL}" && \
    chmod +x Obsidian.AppImage && \
    echo "Downloaded AppImage file info:" && \
    ls -la Obsidian.AppImage && \
    file Obsidian.AppImage

# Copy entrypoint script
# COPY --chown=${USERNAME}:${USERNAME} entrypoint.sh /entrypoint.sh
# RUN chmod +x /entrypoint.sh

# Expose VNC port and a port for Obsidian Sync (if needed, adjust as necessary)
EXPOSE 5900

# Local REST API port
EXPOSE 27124

# Embed default vault data and app config into the image
COPY --chown=${USERNAME}:${USERNAME} obsidian/data/ ${OBSIDIAN_CONFIG_DIR}/
COPY --chown=${USERNAME}:${USERNAME} obsidian/.config/obsidian/ ${OBSIDIAN_APP_CONFIG_DIR}/

# Allow override/persistence via volumes
VOLUME ${OBSIDIAN_CONFIG_DIR}
VOLUME ${OBSIDIAN_APP_CONFIG_DIR}

# Extra diagnostics for debugging
RUN echo "Final check - Obsidian AppImage exists:" && ls -la Obsidian.AppImage

# Copy our macOS-specific entrypoint that keeps running even if xdotool fails
COPY --chown=${USERNAME}:${USERNAME} entrypoint.macos.sh /entrypoint.macos.sh
RUN chmod +x /entrypoint.macos.sh

# This script runs a special infinite loop for macOS compatibility
COPY --chown=${USERNAME}:${USERNAME} <<-"EOT" /entrypoint.resilient.sh
#!/bin/bash

# Run the actual entrypoint with all arguments
/entrypoint.macos.sh "$@" &

# Get its PID
MAIN_PID=$!

# Create healthcheck file
touch /tmp/healthcheck

# Keep container running even if main script exits
while true; do
  if [ -f "/tmp/healthcheck" ]; then
    touch /tmp/healthcheck  # Update timestamp
  fi
  
  # Check if main process is still running
  if kill -0 $MAIN_PID 2>/dev/null; then
    # Still running, all good
    :  # no-op
  else
    echo "[$(date '+%H:%M:%S')] Main entrypoint script exited. Keeping container alive for debugging."
    # Uncomment to automatically exit instead:
    # exit 1
  fi
  
  sleep 10
done
EOT

RUN chmod +x /entrypoint.resilient.sh

# Use Tini as the entrypoint, with our resilient script
ENTRYPOINT ["/tini", "--", "/entrypoint.resilient.sh"]

# Default command (can be overridden)
CMD ["./Obsidian.AppImage", "--no-sandbox"]
