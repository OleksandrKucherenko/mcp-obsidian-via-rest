name: Publish NPM Package (npmjs.org)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (no actual publishing)'
        type: boolean
        default: true
        required: true

jobs:
  # First job: Prepare and run dry-run
  prepare-and-dry-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Full history needed for release-it to generate proper changelog
          fetch-tags: true # For correct version detection by release-it

      # Required for release-it tool to work properly
      - name: Set up Git user
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: |
          bun install

      - name: Extract version from tag
        id: get-version
        run: |
          echo "if tag is $GITHUB_REF, extract version from tag"
          
          # if tag is like refs/tags/v1.2.3, extract version from tag
          if [[ $GITHUB_REF == *"refs/tags/v"* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else # otherwise use version from package.json
            VERSION=$(jq -r '.version' package.json)
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Update version in package.json
        run: |
          # Update version in package.json only if different from tag
          CURRENT_VERSION=$(jq -r '.version' package.json)
          if [ "$CURRENT_VERSION" != "${{ steps.get-version.outputs.VERSION }}" ]; then
            jq ".version = \"${{ steps.get-version.outputs.VERSION }}\"" package.json > package.json.tmp
            mv package.json.tmp package.json
            echo "Updated package.json version from $CURRENT_VERSION to ${{ steps.get-version.outputs.VERSION }}"
          else
            echo "Version in package.json already matches ${{ steps.get-version.outputs.VERSION }}"
          fi
          
      - name: Update publishConfig for npmjs.org
        run: |
          # Update all registry entries in publishConfig to use npmjs.org instead of GitHub Packages
          echo "Updating publishConfig in package.json to use npmjs.org"
          
          # Create a backup of the original package.json
          cp package.json package.json.original
          
          # Update main registry
          jq '.publishConfig.registry = "https://registry.npmjs.org/"' package.json > package.json.tmp
          
          # Update scoped registries
          jq '.publishConfig."@artfulbits:registry" = "https://registry.npmjs.org/"' package.json.tmp > package.json.tmp2
          mv package.json.tmp2 package.json.tmp
          
          jq '.publishConfig."@oleksandrkucherenko:registry" = "https://registry.npmjs.org/"' package.json.tmp > package.json.tmp2
          mv package.json.tmp2 package.json.tmp
          
          # Apply changes
          mv package.json.tmp package.json
          
          # Verify the changes
          echo "Updated registry settings in publishConfig:"
          jq -r '.publishConfig | to_entries[] | "\(.key): \(.value)"' package.json
          
          # Verify that the package.json was properly updated
          if grep -q "registry.npmjs.org" package.json; then
            echo "✅ package.json successfully updated to use npmjs.org"
            rm package.json.original # cleanup
          else
            echo "❌ Failed to update package.json! Restoring from backup."
            mv package.json.original package.json
            exit 1
          fi

      - name: Generate Changelog with release-it (tag)
        if: github.ref_type == 'tag'
        run: |
          echo "Running release-it for tag ${{ github.ref_name }} with version ${{ steps.get-version.outputs.VERSION }}"
          git checkout -b release-${{ steps.get-version.outputs.VERSION }}
          bun run release-it --config .release-it.tag.json --ci --verbose --no-increment

          echo "Generated changelog:"
          head -n 50 CHANGELOG.md || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog with release-it (branch)
        if: github.ref_type != 'tag'
        run: |
          echo "Running release-it for main branch to determine next version"
          git checkout -b next-release-from-${{ steps.get-version.outputs.VERSION }}
          bun run release-it --config .release-it.main.json --ci --verbose

          echo "Generated changelog:"
          head -n 50 CHANGELOG.md || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Package
        run: |
          bun run publish:prepare

      - name: Run Package Publish Dry Run
        id: dry-run
        run: |
          echo "=== DRY RUN MODE - No actual publishing ==="
          npm publish --dry-run --access public --registry="https://registry.npmjs.org/"
          
          # Store package info for the publish job
          PKG_NAME=$(jq -r '.name' package.json)
          PKG_VERSION=$(jq -r '.version' package.json)
          echo "PKG_NAME=$PKG_NAME" >> $GITHUB_OUTPUT
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_OUTPUT
        env:
          # used in .npmrc, .envrc and .bunfig.toml
          NPMJS_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          NPM_REGISTRY_URL: "https://registry.npmjs.org/"

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-${{ github.sha }}
          include-hidden-files: true
          path: |
            dist/index.js
            dist/index.js.map
            package.json
            CHANGELOG.md
            readme.md
            LICENSE
            .npmrc
            *.tgz
          retention-days: 1
      
      - name: Dry Run Summary
        run: |
          echo "# NPM Package Dry Run Results " >> $GITHUB_STEP_SUMMARY
          echo "Package **${{ steps.dry-run.outputs.PKG_NAME }}@${{ steps.dry-run.outputs.PKG_VERSION }}** is ready to be published." >> $GITHUB_STEP_SUMMARY
          echo "Please review the dry run output above and approve the 'publish-to-npmjs' job to complete the publish process." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          { 
            [ -f CHANGELOG.md ] && cat CHANGELOG.md || echo "CHANGELOG.md not found" 
          } >> $GITHUB_STEP_SUMMARY

  # Second job: Actual publish with manual approval
  # Executed only on version Tag assigning to main branch OR manually triggered
  publish-to-npmjs:
    needs: prepare-and-dry-run
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == false)
    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package-${{ github.sha }}
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'
      
      - name: Setup envsubst
        run: |
          sudo apt-get update
          sudo apt-get install gettext

      - name: Publish to NPMJS.org
        run: |
          # Verify .npmrc file was restored from artifacts
          if [ ! -f .npmrc ]; then
            echo "ERROR: .npmrc file not found!"
          fi

          # unpack TGZ file to current directory, TGZ contains `package` folder
          # Extract all files from the tgz archive, overwrite existing files in current directory
          tar -xzf *.tgz && rm *.tgz && cp -rf package/* . && rm -rf package || {
            echo "Failed to extract package files from tgz archive"
            exit 1
          }

          # use `envsubst` to replace variables in .npmrc
          mv .npmrc .npmrc.env
          envsubst < .npmrc.env > .npmrc
          rm .npmrc.env
          
          echo "Current .npmrc configuration:"
          cat .npmrc | grep -v "_authToken"
          
          PKG_NAME=$(node -p "require('./package.json').name")
          PKG_VERSION=$(node -p "require('./package.json').version")
          
          # Detect if this is a pre-release version
          if [[ "$PKG_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-.+ ]]; then
            # Extract pre-release identifier for npm tag
            if [[ "$PKG_VERSION" =~ -([a-zA-Z]+) ]]; then
              NPM_TAG="${BASH_REMATCH[1]}"  # e.g., "rc", "alpha", "beta"
            else
              NPM_TAG="prerelease"  # fallback for versions like "1.0.0-0-sha-1234567"
            fi
            echo "Publishing pre-release $PKG_NAME@$PKG_VERSION with tag: $NPM_TAG"
            npm publish --access public --tag "$NPM_TAG" --registry="https://registry.npmjs.org/"
          else
            echo "Publishing stable release $PKG_NAME@$PKG_VERSION"
            npm publish --access public --registry="https://registry.npmjs.org/"
          fi
        env:
          # used in .npmrc file
          NPMJS_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          NPM_REGISTRY_URL: "https://registry.npmjs.org/"
