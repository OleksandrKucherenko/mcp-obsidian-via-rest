name: Publish NPM Package (npmjs.org)

on:
  workflow_run:
    workflows: ["Publish NPM Package"]
    types:
      - completed
    branches:
      - main
  push:
    tags:
      - 'v*'  # Any valid semver version tag
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (no actual publishing)'
        type: boolean
        default: true
        required: true
  # Weekly schedule for version cleanup
  schedule:
    - cron: '0 2 * * 0'  # Runs at 2:00 AM every Sunday

jobs:
  # First job: Prepare and run dry-run
  prepare-and-dry-run:
    runs-on: ubuntu-latest
    # Conditions:
    # 1. If triggered by workflow_run, the GitHub Packages workflow must have succeeded AND this must be a version tag
    # 2. If triggered by push, it must be a version tag
    # 3. If triggered manually (workflow_dispatch), always run
    if: |
      ${{ 
        (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && startsWith(github.ref, 'refs/tags/v')) || 
        (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || 
        github.event_name == 'workflow_dispatch'
      }}
    steps:
      - name: Checkout Code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for release-it to generate proper changelog

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          bun install

      - name: Extract version from tag
        id: get-version
        run: |
          # if tag is like refs/tags/v1.2.3, extract version from tag
          if [[ $GITHUB_REF == *"refs/tags/v"* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else # otherwise use version from package.json
            VERSION=$(jq -r '.version' package.json)
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Update version in package.json
        run: |
          # Update version in package.json only if different from tag
          CURRENT_VERSION=$(jq -r '.version' package.json)
          if [ "$CURRENT_VERSION" != "${{ steps.get-version.outputs.VERSION }}" ]; then
            jq ".version = \"${{ steps.get-version.outputs.VERSION }}\"" package.json > package.json.tmp
            mv package.json.tmp package.json
            echo "Updated package.json version from $CURRENT_VERSION to ${{ steps.get-version.outputs.VERSION }}"
          else
            echo "Version in package.json already matches ${{ steps.get-version.outputs.VERSION }}"
          fi

      - name: Generate Changelog with release-it
        run: |
          bun run release-it --ci --no-git --no-npm --no-github --changelog
          echo "Generated changelog:"
          head -n 50 CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Package
        run: |
          bun run publish:prepare

      # Always run dry-run first
      - name: Run Package Publish Dry Run
        id: dry-run
        run: |
          echo "=== DRY RUN MODE - No actual publishing ==="
          npm publish --dry-run --access public
          
          # Store package info for the publish job
          PKG_NAME=$(jq -r '.name' package.json)
          PKG_VERSION=$(jq -r '.version' package.json)
          echo "PKG_NAME=$PKG_NAME" >> $GITHUB_OUTPUT
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          # registry URL referenced in .npmrc
          NPM_REGISTRY_URL: "https://registry.npmjs.org/"
          
      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: |
            package.json
            .npmrc
            *.tgz
          retention-days: 1
      
      - name: Dry Run Summary
        run: |
          echo "## NPM Package Dry Run Results ðŸ“¦" >> $GITHUB_STEP_SUMMARY
          echo "Package **${{ steps.dry-run.outputs.PKG_NAME }}@${{ steps.dry-run.outputs.PKG_VERSION }}** is ready to be published." >> $GITHUB_STEP_SUMMARY
          echo "\nPlease review the dry run output above and approve the 'publish-to-npmjs' job to complete the publish process." >> $GITHUB_STEP_SUMMARY

  # Second job: Actual publish with manual approval
  publish-to-npmjs:
    needs: prepare-and-dry-run
    runs-on: ubuntu-latest
    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Publish to NPMJS.org
        run: |
          # .npmrc file was restored from artifacts
          PKG_NAME=$(node -p "require('./package.json').name")
          PKG_VERSION=$(node -p "require('./package.json').version")
          
          echo "Publishing $PKG_NAME@$PKG_VERSION to npmjs.org"
          npm publish --access public
        env:
          # used in .npmrc file
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          # registry URL referenced in .npmrc
          NPM_REGISTRY_URL: "https://registry.npmjs.org/"

  # Cleanup job to deprecate old versions (runs weekly)
  cleanup-old-versions:
    if: ${{ github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get package name
        id: pkg-info
        run: |
          PKG_NAME=$(jq -r '.name' package.json)
          echo "PKG_NAME=$PKG_NAME" >> $GITHUB_OUTPUT

      - name: Deprecate old package versions
        run: |
          echo "Running automated NPM package deprecation"
          node ./assets/ci_deprecate_npm_package.js ${{ steps.pkg-info.outputs.PKG_NAME }}

          # print the generated script
          cat ./deprecate-${{ steps.pkg-info.outputs.PKG_NAME }}-old-versions.sh
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          # registry URL referenced in .npmrc
          NPM_REGISTRY_URL: "https://registry.npmjs.org/"