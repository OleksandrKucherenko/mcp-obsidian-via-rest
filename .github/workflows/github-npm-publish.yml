name: Publish NPM Package (GitHub)

on:
  release:
    types: [created]
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (optional)'
        required: false
        type: string

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# concurrency:
#   group: "pages"
#   cancel-in-progress: false

jobs: 
  # Multi-platform unit testing
  testing-unit:
    name: Unit Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux-x86
          - os: macos-latest
            platform: macos-arm64
    
    steps:
      - name: Checkout Code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install

      - name: Run Type Checks
        run: bun run checks:types

      - name: Run Unit Tests
        run: bun run test

      - name: Build Package
        run: bun run build

  # E2E testing with manual Docker management (Linux only)
  testing-e2e-manual:
    runs-on: ubuntu-latest
    needs: testing-unit
    steps:
      - name: Checkout Code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install

      - name: Start Docker Compose for E2E Tests
        id: compose-e2e
        uses: hoverkraft-tech/compose-action@v2.2.0
        with:
          compose-file: ./docker-compose.yaml
          up-flags: "-d"

      - name: Wait for Services
        run: |
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Run E2E Tests (Manual Docker Management)
        env:
          API_KEY: "190ba65d28ac1ba4797cb195bb06f20965395abbd9c39a0fa9b6cab2345c58b9"
        run: |
          echo "Running E2E tests with Docker Compose managed containers"
          bun run test:e2e

  # Container testing with testcontainers (automated lifecycle)
  testing-containers-automated:
    runs-on: ubuntu-latest
    needs: testing-unit
    steps:
      - name: Checkout Code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install

      - name: Run Container Tests (Testcontainers)
        run: |
          echo "Running container tests with testcontainers (automated lifecycle)"
          bun run test:containers
        
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - testing-unit
      - testing-e2e-manual
      - testing-containers-automated
    steps:
      - name: Checkout Code with full history
        uses: actions/checkout@v4
        # get full history for release-it tool
        with:
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set lowercase repository name
        id: repo_name
        run: |
          # Extract owner and repo name
          echo "owner=$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 1 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "repo_simple=$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ steps.repo_name.outputs.owner }}'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          registry-url: https://npm.pkg.github.com/
          scope: '@${{ steps.repo_name.outputs.owner }}'

      - name: Install Dependencies
        run: bun install

      - name: Run Unit Tests
        run: |
          # run unit tests
          bun run test

      - name: Verify that Package is ready for GitHub Packages
        run: |
          # Ensure package.json has correct repository field
          if ! grep -q '"repository"' package.json; then
            sed -i 's/^\(  "name": ".*"\)/\1,\n  "repository": "https:\/\/github.com\/${{ github.repository }}"/g' package.json
          fi

          # Make sure package name is scoped
          if ! grep -q '"name": "@' package.json; then
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            sed -i "s/\"name\": \"$PACKAGE_NAME\"/\"name\": \"@${{ github.repository_owner }}\/$(echo $PACKAGE_NAME | sed 's/@.*\///')\"/g" package.json
          fi

      - name: Extract Release Type (semantic commit)
        id: release-type
        continue-on-error: true
        run: |
          # Check release-it for next version based on commits between last tag and HEAD.
          bun run release:dry --ci --no-increment

          # Extract version from package.json
          export PACKAGE_VERSION=$(node -p "require('./package.json').version")
          export SHA=${GITHUB_SHA::7}
          export TAG="sha-${SHA}"
          export UNIQUE_VERSION="${PACKAGE_VERSION}-${TAG}"

          # Update package.json
          jq ".version = \"$UNIQUE_VERSION\"" package.json > package.tmp.json
          mv package.tmp.json package.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Package
        run: |
          # prepare the TGZ file for publishing
          bun run publish:prepare

      - name: Publish to GitHub Packages
        run: |
          export SHA=${GITHUB_SHA::7}
          export TAG="sha-${SHA}"
          # do the publishing under unique 'sha-${SHA}' tag
          bun publish --tag $TAG --registry "https://npm.pkg.github.com"
        env:
          BUN_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_CONFIG_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # used in .npmrc, .envrc and .bunfig.toml
          GITHUB_NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPMJS_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_REGISTRY_URL: "https://npm.pkg.github.com"
