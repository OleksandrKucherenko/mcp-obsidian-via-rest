name: Publish NPM Package

on:
  release:
    types: [created]
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (optional)'
        required: false
        type: string
  
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout Code with full history
        uses: actions/checkout@v4
        # get full history for release-it tool
        with:
          fetch-depth: 0 

      - name: Set lowercase repository name
        id: repo_name
        run: |
          # Extract owner and repo name
          echo "owner=$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 1 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "repo_simple=$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ steps.repo_name.outputs.owner }}'
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          registry-url: https://npm.pkg.github.com/
          scope: '@${{ steps.repo_name.outputs.owner }}'
      
      - name: Install Dependencies
        run: bun install

      # - name: Run Docker Compose
      #   uses: hoverkraft-tech/compose-action@v2.2.0
      #   with:
      #     compose-file: ./docker-compose.yaml        

      - name: Run Unit Tests, including e2e tests
        run: |
          # run e2e and unit tests
          bun test          
      
      - name: Verify that Package is ready for GitHub Packages
        run: |
          # Ensure package.json has correct repository field
          if ! grep -q '"repository"' package.json; then
            sed -i 's/^\(  "name": ".*"\)/\1,\n  "repository": "https:\/\/github.com\/${{ github.repository }}"/g' package.json
          fi
          
          # Make sure package name is scoped
          if ! grep -q '"name": "@' package.json; then
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            sed -i "s/\"name\": \"$PACKAGE_NAME\"/\"name\": \"@${{ github.repository_owner }}\/$(echo $PACKAGE_NAME | sed 's/@.*\///')\"/g" package.json
          fi
          
      - name: Extract Release Type (semantic commit)
        id: release-type
        continue-on-error: true
        run: |
          # Check release-it for next version based on commits between last tag and HEAD.
          bun run release:dry --ci --no-increment 
          
          # Extract version from package.json
          export PACKAGE_VERSION=$(node -p "require('./package.json').version")
          export SHA=${GITHUB_SHA::7}
          export TAG="sha-${SHA}"
          export UNIQUE_VERSION="${PACKAGE_VERSION}-${TAG}"

          # Update package.json
          jq ".version = \"$UNIQUE_VERSION\"" package.json > package.tmp.json
          mv package.tmp.json package.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build Package
        run: |
          # prepare the TGZ file for publishing
          bun run publish:prepare

      - name: Publish to GitHub Packages
        run: |
          export SHA=${GITHUB_SHA::7}
          export TAG="sha-${SHA}"
          # do the publishing under unique 'sha-${SHA}' tag
          bun publish --tag $TAG --registry "https://npm.pkg.github.com"
        env:
          BUN_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_CONFIG_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # used in .npmrc, .envrc and .bunfig.toml
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
